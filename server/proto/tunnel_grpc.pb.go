// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/control.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TunnelControl_CreateTunnel_FullMethodName = "/tunnel.TunnelControl/CreateTunnel"
	TunnelControl_CloseTunnel_FullMethodName  = "/tunnel.TunnelControl/CloseTunnel"
)

// TunnelControlClient is the client API for TunnelControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Control service for managing tunnels
type TunnelControlClient interface {
	CreateTunnel(ctx context.Context, in *TunnelRequest, opts ...grpc.CallOption) (*TunnelResponse, error)
	CloseTunnel(ctx context.Context, in *TunnelID, opts ...grpc.CallOption) (*CloseResponse, error)
}

type tunnelControlClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelControlClient(cc grpc.ClientConnInterface) TunnelControlClient {
	return &tunnelControlClient{cc}
}

func (c *tunnelControlClient) CreateTunnel(ctx context.Context, in *TunnelRequest, opts ...grpc.CallOption) (*TunnelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TunnelResponse)
	err := c.cc.Invoke(ctx, TunnelControl_CreateTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelControlClient) CloseTunnel(ctx context.Context, in *TunnelID, opts ...grpc.CallOption) (*CloseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, TunnelControl_CloseTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelControlServer is the server API for TunnelControl service.
// All implementations must embed UnimplementedTunnelControlServer
// for forward compatibility.
//
// Control service for managing tunnels
type TunnelControlServer interface {
	CreateTunnel(context.Context, *TunnelRequest) (*TunnelResponse, error)
	CloseTunnel(context.Context, *TunnelID) (*CloseResponse, error)
	mustEmbedUnimplementedTunnelControlServer()
}

// UnimplementedTunnelControlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTunnelControlServer struct{}

func (UnimplementedTunnelControlServer) CreateTunnel(context.Context, *TunnelRequest) (*TunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedTunnelControlServer) CloseTunnel(context.Context, *TunnelID) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTunnel not implemented")
}
func (UnimplementedTunnelControlServer) mustEmbedUnimplementedTunnelControlServer() {}
func (UnimplementedTunnelControlServer) testEmbeddedByValue()                       {}

// UnsafeTunnelControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelControlServer will
// result in compilation errors.
type UnsafeTunnelControlServer interface {
	mustEmbedUnimplementedTunnelControlServer()
}

func RegisterTunnelControlServer(s grpc.ServiceRegistrar, srv TunnelControlServer) {
	// If the following call pancis, it indicates UnimplementedTunnelControlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TunnelControl_ServiceDesc, srv)
}

func _TunnelControl_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelControlServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelControl_CreateTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelControlServer).CreateTunnel(ctx, req.(*TunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelControl_CloseTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunnelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelControlServer).CloseTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelControl_CloseTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelControlServer).CloseTunnel(ctx, req.(*TunnelID))
	}
	return interceptor(ctx, in, info, handler)
}

// TunnelControl_ServiceDesc is the grpc.ServiceDesc for TunnelControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.TunnelControl",
	HandlerType: (*TunnelControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTunnel",
			Handler:    _TunnelControl_CreateTunnel_Handler,
		},
		{
			MethodName: "CloseTunnel",
			Handler:    _TunnelControl_CloseTunnel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control.proto",
}

const (
	TunnelData_ForwardData_FullMethodName = "/tunnel.TunnelData/ForwardData"
)

// TunnelDataClient is the client API for TunnelData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Streaming service for data transfer
type TunnelDataClient interface {
	ForwardData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DataPacket, DataPacket], error)
}

type tunnelDataClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelDataClient(cc grpc.ClientConnInterface) TunnelDataClient {
	return &tunnelDataClient{cc}
}

func (c *tunnelDataClient) ForwardData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DataPacket, DataPacket], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TunnelData_ServiceDesc.Streams[0], TunnelData_ForwardData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataPacket, DataPacket]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelData_ForwardDataClient = grpc.BidiStreamingClient[DataPacket, DataPacket]

// TunnelDataServer is the server API for TunnelData service.
// All implementations must embed UnimplementedTunnelDataServer
// for forward compatibility.
//
// Streaming service for data transfer
type TunnelDataServer interface {
	ForwardData(grpc.BidiStreamingServer[DataPacket, DataPacket]) error
	mustEmbedUnimplementedTunnelDataServer()
}

// UnimplementedTunnelDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTunnelDataServer struct{}

func (UnimplementedTunnelDataServer) ForwardData(grpc.BidiStreamingServer[DataPacket, DataPacket]) error {
	return status.Errorf(codes.Unimplemented, "method ForwardData not implemented")
}
func (UnimplementedTunnelDataServer) mustEmbedUnimplementedTunnelDataServer() {}
func (UnimplementedTunnelDataServer) testEmbeddedByValue()                    {}

// UnsafeTunnelDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelDataServer will
// result in compilation errors.
type UnsafeTunnelDataServer interface {
	mustEmbedUnimplementedTunnelDataServer()
}

func RegisterTunnelDataServer(s grpc.ServiceRegistrar, srv TunnelDataServer) {
	// If the following call pancis, it indicates UnimplementedTunnelDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TunnelData_ServiceDesc, srv)
}

func _TunnelData_ForwardData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelDataServer).ForwardData(&grpc.GenericServerStream[DataPacket, DataPacket]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelData_ForwardDataServer = grpc.BidiStreamingServer[DataPacket, DataPacket]

// TunnelData_ServiceDesc is the grpc.ServiceDesc for TunnelData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel.TunnelData",
	HandlerType: (*TunnelDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ForwardData",
			Handler:       _TunnelData_ForwardData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/control.proto",
}
